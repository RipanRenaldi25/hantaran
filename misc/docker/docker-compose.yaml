version: '3.8'

services:
  mysql:
    image: mysql:8.0
    container_name: mysql
    volumes:
      - ./volumes:/var/lib/mysql
    env_file:
      - .env.development

  mysql_prod:
    image: mysql:8.0
    container_name: mysql_prod
    restart: always
    env_file:
      - .env.production

  be_dev:
    build:
      context: ../../
      dockerfile: ./misc/docker/Dockerfile
      target: BE_DEV
    container_name: be_dev
    depends_on:
      - mysql
    volumes:
      - ../../app/backend:/app
      - ../../app/backend/node_modules:/app/node_modules
    ports:
      - 5001:5001
    command: npm run start:dev
    env_file:
      - .env.development

  be_prod:
    build:
      context: ../../
      dockerfile: ./misc/docker/Dockerfile
      target: BE_PROD
    container_name: be_prod
    ports:
      - 5000:5000
    env_file:
      - .env.production
    command: npm run start
    depends_on:
      - mysql_prod

  fe_dev:
    build:
      context: ../../
      dockerfile: ./misc/docker/Dockerfile
      target: FE_DEV
    volumes:
      - ../../app/frontend:/app
      - ../../app/frontend/node_modules:/app/node_modules
    command: npm run dev
    env_file:
      - .env.development
    ports:
      - 5173:5173
    depends_on:
      - be_dev

  fe_prod:
    build:
      context: ../../
      dockerfile: ./misc/docker/Dockerfile
      target: FE_PROD
    depends_on:
      - be_prod
    ports:
      - 8080:80
    env_file:
      - .env.production

  # ngrok:
  #   image: ngrok/ngrok
  #   container_name: ngrok
  #   environment:
  #     - NGROK_AUTHTOKEN=${NGROK_AUTHTOKEN}
  #   restart: unless-stopped
  #   command: ngrok start --all --config /etc/ngrok.yml
  #   volumes:
  #     - ./ngrok.yml:/etc/ngrok.yml
